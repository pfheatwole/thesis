.. This chapter demonstrates how to use the component models to create
   paraglider system models and simulate their dynamics. The modeling process
   combines basic technical specs from a user manual with photographic
   information and reasonable assumptions about paraglider wing design. The
   simulations perform static and dynamic performance tests (polar plots and
   flight maneuvers, respectively) and compare them to expected behaviors.


*************
Demonstration
*************

.. attention:: **This chapter is VERY raw. I recommend skipping it for now.**


One reason that modeling a commercial paraglider wing is difficult is because
the published specifications are limited to basic summary measurements. A major
task of the modeling process is to augment the missing information to create
a complete model. To address that difficulty, this paper developed parametric
:doc:`component models <paraglider_components>` that encode assumptions of the
unknown structure.

This chapter demonstrates one possible workflow to estimate the parameters of
the component models by combining publicly available technical specifications
and photographs with knowledge of typical paraglider wing design. Once the
components are combined into a :doc:`system model <system_dynamics>`, it is
validated by comparing its estimates of the glider's longitudinal steady-state
aerodynamics over the range of control inputs against published performance
data, such as minimum sink rate and speed range. The chapter concludes with
flight simulations using the model in a variety of flight scenarios.


Model creation
==============

.. Introduce the wing

The paraglider wing used in this example is a Niviuk Hook 3. With forgiving
flight characteristics targeting advanced beginners, this wing is not intended
for acrobatics, so the :ref:`limitations <foil_aerodynamics:limitations>` of
the :ref:`aerodynamics method <foil_aerodynamics:Phillips' numerical
lifting-line>` are not an issue when simulating the majority of flights
produced by this wing.

.. figure:: figures/paraglider/demonstration/Hook3_front_view.jpg
   :name: Hook3_front_view

   Front-view of an inflated Niviuk Hook 3

Wing data for a commercial wing is typically limited to four sources:

1. Technical specifications and user manuals

2. Flight test data from certifications and reviews

3. Pictures and videos

4. Physical measurements

For this chapter, only the first three will be utilized. Although physical
measurements are ideal, they are frequently difficult to obtain (especially for
older wings). Instead, this demonstration is focused on showing that it is
feasible to create an approximate wing model even if physical measurements are
unavailable.


Technical specs
---------------

The following sections demonstrate how to estimate the parameters for a size
23 version of the wing. The same process is used (but not shown) to create
models of the size 25 and 27 wings for the discussion in
:ref:`demonstration:Model validation`.

The process begins with the primary technical data from the official `technical
specifications manual
<https://niviuk.com/niviuk/customer_pdf/Descatalogado/Hook%203/Datos%20t%C3%A9cnicos/HOOK3_TECNIC_ENG.pdf>`__:

.. FIXME: this link is now broken!

.. list-table:: Wing data
   :header-rows: 1
   :widths: auto

   * - Property [unit]
     - Size 23
     - Size 25
     - Size 27
   * - Flat area [m\ :sup:`2`]
     - 23
     - 25
     - 27
   * - Flat span [m]
     - 11.15
     - 11.62
     - 12.08
   * - Flat aspect ratio
     - 5.40
     - 5.40
     - 5.40
   * - Projected area [m\ :sup:`2`]
     - 19.55
     - 21.25
     - 22.95
   * - Projected span [m]
     - 8.84
     - 9.22
     - 9.58
   * - Projected aspect ratio
     - 4.00
     - 4.00
     - 4.00
   * - Root chord [m]
     - 2.58
     - 2.69
     - 2.8
   * - Tip chord [m]
     - 0.52
     - 0.54
     - 0.56
   * - Standard mean chord [m]
     - 2.06
     - 2.14
     - 2.23
   * - Number of cells
     - 52
     - 52
     - 52
   * - Total line length [m]
     - 218
     - 227
     - 236
   * - Central line length [m]
     - 6.8
     - 7.09
     - 7.36
   * - Accelerator line length [m]
     - 0.15
     - 0.15
     - 0.15
   * - Solid mass [kg]
     - 4.9
     - 5.3
     - 5.5
   * - In-flight weight range [kg]
     - 65-85
     - 80-100
     - 95-115


Recall that a "paraglider wing" includes both the canopy and the suspension
lines, so the technical data describes both components. It also includes the
weight range that the wing can safely carry while retaining control authority,
which is useful for defining an suitable payload.


Canopy
------

.. This section should highlight how a reasonable approximation can be
   produced from the minimal wing data like flat and inflated span, taper,
   etc. Show what data I had, what assumptions I used to fill in the blanks,
   and how well the result matched the target.

The first component model of the paraglider system is for the :ref:`canopy
<paraglider_components:Canopy>`. The canopy model combines an (idealized)
:doc:`foil_geometry` model with physical details to estimate the aerodynamics
and inertial properties of the canopy. For the canopy model parameters, it's
easiest to think of them in two groups:

.. FIXME: awkward wording

1. Parameters for the :ref:`design curves <derivations:Parametric design
   curves>` that define the variables :eq:`simplified foil geometry variables`
   of the :ref:`foil geometry model <foil_geometry:Simplified model>`

2. Parameters for the physical details :eq:`canopy parameters`

.. FIXME: copy them here?


Foil geometry
^^^^^^^^^^^^^

.. rubric:: Layout

The first part of specifying a foil geometry is to layout the scale, position,
and orientation of its sections.

[[For a parafoil, it's easiest to start by describing the geometry of the
flattened (uninflated) canopy before dealing with the arc. This approach is
made much easier by the choice of the :ref:`foil_geometry:Simplified model` to
define the :ref:`section index <simplified model section index>` in terms of
the :math:`yz`-curve. When a parafoil is flattened the section index
corresponds to the normalized distance along each semispan, which allows the
:math:`x`-positions and chord lengths to be measured directly without regard
for the arc.]]


.. Chord length (c)

First, consider the chord length distribution :math:`c(s)`. The technical
specifications only list the root, tip, and mean chord lengths, so more
information is required. Thankfully, for parafoils a reasonable guess is that
the wing uses a truncated elliptical distribution. (Paragliding wings commonly
use truncated elliptic functions because they encourage elliptical lift
distributions, thus reducing induced drag.) Such a truncated elliptical
distribution can be easily parametrized by the wing root and wing tip section
chord lengths, as shown by the :ref:`derivations:Elliptical chord` design
curve. The technical specs list these two parameters as :math:`c_\textrm{root}
= 2.58` and :math:`c_\textrm{tip} = 0.52`, respectively. Using those values
produces a mean chord length of :math:`2.06`, which exactly matches the
standard mean chord listed in the manufacturers specs. The assumption was
justified. An additional check is to compare the area of the flattened chord
surface; for these values the truncated elliptical produces a flattened area of
:math:`22.986` compared to the true specification of :math:`23.0`. (This
discrepancy may be explained by differences in measuring methodology or by the
current absence of any geometry twist, but in practice the effect is
negligible.)


.. Fore-aft positioning (r_x, x)

Next is the fore-aft positioning of the sections, which are controlled by the
:math:`r_x(s)` and :math:`x(s)` design curves. Although traditional wing
geometry models would effectively choose :math:`r_x(s) = 0` and measure the
:math:`x`-offsets of each section's leading edge, that choice often produces an
unnecessarily complicated :math:`x(s)` function. Instead, paragliders can often
be described with constant :math:`r_x(s)` and :math:`x(s) = 0`. As with the
chord lengths, the value of :math:`r_x(s)` is easiest to estimate from the
flattened wing; in fact, flattened drawings are commonly available in technical
manuals, making them especially convenient. (Admittedly, such drawings are not
always to scale, and so should be used with caution.) For this wing, a small
amount of trial and error using a top-down view from the wing user manual
suggests :math:`r_x = 0.7` gives a strong agreement with the drawing in the
manual, as seen in :numref:`Hook3_topdown`.

.. figure:: figures/paraglider/demonstration/Hook3_topdown.jpg
   :name: Hook3_topdown

   Top-down outline of flattened canopy

   The black outline is the boundary of the model's flattened chord surface.
   The colored background is taken from the user manual for the wing.


.. Arc (yz-curve)

With the flattened chord surface completed, the next step is to define the
*arc* (position in the :math:`yz`-plane). Photos of the wing suggest that an
elliptical arc segment is a reasonable starting point. For the arc reference
points :math:`r_yz(s)`, the exact value has a small impact on most parafoil
designs, but a reasonable guess is to use the quarter-chord position
:math:`r_{yz}(s) = 0.25`. For the arc positions :math:`yz(s)`, a parametric
:ref:`derivations:Elliptical arc` can be defined using three parameters: two
for the normalized shape (:math:`\Gamma_\textrm{tip}` and
:math:`\phi_\textrm{tip}`) and one for the scale (:math:`b_\textrm{flat}`).
There are several ways to estimate the elliptical arc parameters of the
physical wing, such as the width to height ratios, or visual estimation of the
arc angle, but since the specs included both the flattened and projected spans,
the simplest method is to guess :math:`\phi_\textrm{tip}` and increase
:math:`\Gamma_\textrm{tip}` until the projected span matches the expected
value. Starting with an initial guess of :math:`\phi_\textrm{tip} = 75`, a few
iterations shows good agreement with :math:`\Gamma_\textrm{tip} = 32`. Checking
the fit shows a projected span of :math:`b = 8.845` (versus the true value of
:math:`b = 8.840`) and a projected area of :math:`S = 19.405` (versus the true
value of :math:`S = 19.550`). As with the flattened values, the small
discrepancy may be explained by differences in measurement methodology, and
isn't worth optimizing further.

.. FIXME: show the rear-view picture and the resulting model? I'd prefer
   a straight-on photo, it's hard to tell with angled photos.


.. Geometric torsion (theta)

After the relatively straightforward process of positioning the sections is the
more difficult task of estimating their orientation. In the :ref:`simplified
model <foil_geometry:Simplified model>` section roll is defined by the
curvature of the :math:`yz`-curve and the section yaw is defined as zero, but
the section pitch :math:`\theta(s)` (or *geometric torsion*) can be difficult
to measure. Most parafoils benefit from a small amount of increasing geometric
torsion towards the wing tips (or *washin*), and a conservative guess of `4`
degrees at the wingtip should be reasonably accurate. For lack of better
information, this demonstration chose a piecewise :ref:`linear model
<derivations:Polynomial torsion>` that grows from 0 to 4 degrees over the range
:math:`0.05 \le |s| \le 1`.


.. Section profiles

.. rubric:: Profiles

Having finished defining the section layout (scale, position, and orientation),
each section must be assigned an airfoil.

[[FIXME: explain my choice. Belloc used the 23015, but
:cite:`lingard1995RamairParachuteDesign` says that many older designs used
a Clark-Y with 18% thickness. I chose the NACA 24018 as a sort of clumsy
compromise. He also mentions that newer gliders have "benefited from glider
technology and use a range of low-speed section" like the LS(1)-0417 (which
was also chosen by :cite:`becker2017ExperimentalStudyParaglider`).]]

.. figure:: figures/paraglider/demonstration/braking_NACA24018.*
   :name: airfoil set, braking NACA24018

   Set of NACA 24018 airfoils with trailing edge deflections.

[[FIXME: explain how I produced those profiles? Oof. While I'm at it, explain
why this is an extremely optimistic model of how parafoil sections deform with
increasing brake inputs. I'd go as far as to guess that this is the number one
source of error in the model.]]

[[FIXME: explain using XFOIL to estimate the section coefficients?]]


Physical details
^^^^^^^^^^^^^^^^

In addition to a :doc:`foil geometry <foil_geometry>`, a canopy model requires
details of physical attributes such as surface material densities and air
intake extents in order to calculate inertial properties and viscous drag
corrections.


.. rubric:: Surface materials

.. Materials (rho_upper, rho_lower, rho_ribs, N_cells)

In this case, the surface material densities can be read directly from the
materials section of the user manual:

.. ref: HOOK3_MANUAL_ENG.pdf, Sec:11.2, p.15

.. list-table:: Hook 3 material densities
   :header-rows: 1
   :name: hook3_material_densities

   * - Surface
     - Material
     - Density :math:`\left[ \frac{kg}{m^2} \right]`
   * - Upper
     - Porcher 9017 E77A
     - 0.039
   * - Lower
     - Dominico N20DMF
     - 0.035
   * - Internal ribs
     - Porcher 9017 E29
     - 0.041

In addition to the material densities, the canopy model requires the number of
cells to determine the distribution of mass for the internal ribs. The specs
lists :math:`N_\textrm{cells} = 52`, which implies the wing has 53 internal
ribs. In reality the ribs are *ported* (holes that allow air to flow between
cells) so assuming solid ribs is an overestimate, but since the canopy model is
neglecting the mass in the remainder of the internal structure the discrepancy
should balance out.

.. Air intakes (s_end, r_upper, r_lower)

For the air intakes, the user manual provides a projected diagram (Fig. 11.4,
p. 17) which shows that the air intakes start at the 21st of 26 ribs (the 27th
"rib" in the diagram is part of the stabilizer panel) spreading out from the
central rib; assuming a linear spacing of the ribs this would correspond to
:math:`s = 0.807`, so :math:`s_\textrm{end} = 0.8` is a reasonable guess for
the spanwise extent of sections with air intakes.

The other dimension of the air intakes is the size of their opening, which is
determined by the extent of the upper and lower surface. This value is
difficult to determine precisely from photos, but thankfully its effect on the
solid mass inertia and viscous drag is relatively minor; in the absence of
physical measurements, a reasonable guess is :math:`r_\textrm{upper} = -0.04`
and :math:`r_\textrm{lower} = -0.09` for an air intake length roughly 5% of the
length of the chord.

.. FIXME: one of my references mentions sizes of air intakes. Explain why
   I chose 5% as "a reasonable guess".

.. figure:: figures/paraglider/demonstration/air_intakes.*
   :name: NACA24018 with air intakes

   NACA 24018 with air intakes

[[FIXME: sanity check the total mass. The specs list the total wing weight at
4.9kg, but the canopy upper/lower/rib materials only account for 2.95kg. My
mass calculations neglect the extra mass due to things like the lines, riser
straps, carabiners, internal v-ribs, horizontal straps, tension rods, etc, so
I'm underestimating that mass, but I'm also assuming the vertical ribs are
solid (no ports) so that makes up for a bit of the missing mass]]


.. rubric:: Viscous drag corrections

.. Aerodynamic coefficients for viscous drag corrections

* :math:`C_{D,\textrm{intakes}}`

* :math:`C_{D,\textrm{surface}}`

[[This assumes a single profile is used for all sections.]]


Suspension lines
----------------

The second component model of the paraglider system is for the :ref:`suspension
lines <paraglider_components:Suspension lines>`. It is responsible for
positioning the payload, adjusting the position as a function of the
accelerator input, computing the trailing edge deflection angles, and
estimating the aerodynamic drag of the lines.

.. FIXME: I'm okay neglecting the weight of the lines?


Riser position
^^^^^^^^^^^^^^

.. Design variables: kappa_x, kappa_z, kappa_A, kappa_C, kappa_a

[[FIXME: explain how to estimate the lines' parameters :eq:`suspension lines
parameters, riser position`]]


.. kappa_z

* Typically the easiest parameter to procure is :math:`\kappa_z`: the vertical
  distance from the riser midpoint to the canopy. For this wing, the technical
  specs listed this value as the "Central line length" and can be used
  directly.


.. kappa_A and kappa_C


* The fore and aft suspension lines are referred to as the A and C lines, and
  connect to the canopy at the :math:`\kappa_A` and :math:`\kappa_C` chord
  positions.

* The chord ratios are easiest to measure on a physical wing, but measurements
  from a line layout diagram in a technical manual may work as well.

* [[FIXME: explain that because the accelerator causes the wing to rotate about
  the C connection point, `kappa_C` strongly affects wing behavior when
  accelerator is applied.]]

* [[FIXME: show the diagram from the manual?]]


.. kappa_a

* [[The accelerator decreases the length of the A lines to reposition the
  harness. For this wing, the accelerator line length can be read directly from
  the specs: :math:`\kappa_a = 0.15`]]


.. kappa_x

* Lastly is to define the fore-aft position of the payload with
  :math:`\kappa_x`.

* [[FIXME: explain why it's easiest to estimate this last. It's not in the
  specs and very difficult to measure from the physical wing, diagrams, or
  pictures.]]

* [[FIXME: explain how `kappa_x` affects wing behavior and the polar curve so
  we can take advantage of that knowledge for designing the model]]

* A simple rule of thumb for modern paragliders is to start with the assumption
  that the wing has been designed to maximize its glide ratio at "trim"
  conditions (ie, when no inputs are applied). Given that assumption,
  calculating the equilibrium conditions [[as explained below]] for the wing
  turns this parameter estimation into an optimization problem. If maximum
  glide occurs with brakes, increase `kappa_x`; if it needs accelerator,
  decrease it. Eventually you'll find a payload position 

* [[FIXME: this step happens later! After you've finished the model. It's an
  optimization pass after you've created the entire system. Also point out that
  this approach requires making an assumption of what harness and weight the
  wing designer was optimizing the design for since those affect the polar.]]

* [[Summary: start with `kappa_x = 0.5`, finish designing the complete system,
  then optimize `kappa_x` until best glide occurs for zero inputs.]]


.. You COULD attempt to figure it out from the data, but it'd be a pain. For
   example, consider the line lengths from pg8 of the Hook 3 technical specs.
   Neglecting the riser length of `0.470m`, the total lengths of the lines from
   the risers to the tabs:

  .. code-block::

    2A1   = 3.994
    A1    = 1.958
    a1    = 0.361
    Total = 6.313

    2C1   = 4.720
    C1    = 1.253
    c1    = 0.308
    Total = 6.281

  If you neglected the differences in the cascades for the As and Cs, the
  riser should be virtually centered between the two, which would mean if
  `kappa_A = 0.11` and `kappa_C = 0.59` then `kappa_x = 0.35`. However, the Cs
  first cascade is higher, thus larger angles, so the total length of the Cs
  will be "too long" (the more you deviate from a straight line, the longer
  the length to reach the destination).

  A few crude guesses suggest the `kappa_x = 0.5` isn't terrible.

  Using the lengths of the As and Cs is difficult, because `kappa_x` is very
  sensitive to small differences. For the Hook3, if they were the same length
  then `kappa_x = 0.35`, but if `kappa_x = 0.5` (a large difference in
  horizontal position) then the `C = 0.9898 * A`: scarcely more than 1%
  difference!

  Is using the nominal glide speed a better measure? I wonder how much
  `kappa_x/kappa_z` affects stability... Is `kappa_x` important?

  Maybe tune `kappa_x` to maximize the glide ratio? That happens at `kappa_x
  = 0.5c`. Of course it's common for the optimum glide ratio to occur when
  speedbar is applied, but whatever. Let's assume this wing was optimized for
  best glide at trim.



Brakes
^^^^^^

.. Maximum trailing edge deflection

   Design variables: kappa_b

**Estimating the maximum trailing edge deflection**

* The :ref:`paraglider_components:Suspension lines` model assumed the brake
  inputs are on a scale from 0 to 1, with maximum braking associated with
  a predetermined maximum brake deflection :math:`\kappa_b`.

  (Related: deflection distance :eq:`normalized deflection distance`)

* On a real wing the brake lines effectively don't have a limit, since
  a pilot can literally pull the trailing edge all the way back to the
  risers. It exists because it made the model more convenient to use.

* It represents the maximum deflection distance that the line model will
  produce. Providing an upper bound is useful for keeping the wing within the
  operating range of the section coefficient data.

  For this model, the coefficients are limited to a normalized deflection
  distance of `0.203` (see :numref:`airfoil set, braking NACA24018`).

* [[FIXME: explain how the coefficient data sets the upper bound on
  :math:`\kappa_b`, and how to use an optimization routine to compute it.
  Tricky, to explain since the procedure depends on the set of profiles, the
  chord distribution, and the brake deflection distribution. Refer to
  `SimpleLineGeometry.maximize_kappa_b`]]



.. Deflection angle distribution and braking profiles

   Design variables: s_delta_start0/1, s_delta_stop0/1

   Keep this discussion after `kappa_b` since the stop variables should match
   when the maximum supported deflection occurs.

**Estimating start/stop positions**

The true deflection angle distribution depends on the complete physical
line geometry (line lengths and cascade angles, but since the simple model
does not include those the deflection angles must be assumed/guessed.

[[Estimate the parameters of the quartic model in
:ref:`paraglider_components:Brakes` by looking at a rear-view photo of
a wing.]]

.. figure:: figures/paraglider/demonstration/Hook3_rear_view.jpg
   :name: Hook3_rear_view

   Rear-view of an inflated Hook 3 with symmetric brake deflections

[[From this picture you can see that the brake deflection doesn't start until
some distance from the root. The brake lines are hard to see, but their
deflections are intuitive. The result is that instead of using a true line
geometry, you can get away with an approximate deflection distribution using
a simple cubic function with a few carefully chosen end points.]]

[[This method is admittedly weak. Probably not a major problem in practice,
but call it out when discussing reasons why I'm not comparing this to actual
flight data (goes together with the other uncertainties, like unknown
airfoil).]]

.. figure:: figures/paraglider/demonstration/Hook3_TE_0.25_0.50.*

   Quartic brake deflections, :math:`\delta_{bl} = 0.25` and :math:`\delta_{br}
   = 0.5`

.. raw:: html or singlehtml

   <br/>

.. figure:: figures/paraglider/demonstration/Hook3_TE_1.00_1.00.*

   Quartic brake deflections, :math:`\delta_{bl} = 1.00` and
   :math:`\delta_{br} = 1.0`


[[FIXME: explain how I generated some VERY idealized deformed profiles to
implement deflected trailing edges]]

[[FIXME: explain using XFOIL to get the section coefficients.]]


Line drag
^^^^^^^^^

.. Design variables: total line length, line diameter, r_L2LE (lumped
   positions for the line surface area), and Cd_lines

* FIXME: how should I specify the total line length and lumped position for
  the line drag? I really hate `r_L2LE`; should it just assume two points at
  `<0.5c, +/- 0.25 b/2, 0.25 z_RM>`? I haven't assigned these proper variable
  names yet; leave it that way?

  Also, the line drag coefficient assumes the lines are the same diameter
  everywhere, which is clearly wrong. The lines getter smaller as you go up
  the cascade.


Payload
-------

.. Total payload mass, spherical radius, drag coefficient, etc

   Design variables: m_p, z_riser, S_p, C_d,p, kappa_w

The final component model of the paraglider system is for the :ref:`harness
<paraglider_components:Harness>`. This component is responsible for [[...]].

The manual for the size 23 wing specifies a maximum in-flight weight limit of
85kg, and the (true) solid mass of the physical wing is 4.9kg, so a 75kg
payload is reasonable. To choose the projected area and drag coefficient,
[[consider]] :cite:`benedetti2012ParaglidersFlightDynamics` (p. 85) or
:cite:`babinsky1999AerodynamicPerformanceParagliders` (p. 422); given that 75kg
is a lower-than-average payload (so smaller frontal area), and that this is
a beginner-grade wing (so a more aerodynamic "pod" harness is less likely),
a reasonable guess of the projected area would be :math:`S_\textrm{payload}
= 0.55 \left[\textrm{m}^2\right]` with an drag coefficient of
:math:`C_{d,\textrm{payload}} = 0.8`. At that size the payload mass centroid
should be approximately 0.5m below the risers (especially since the uniform
density assumption neglects that the legs shift the center of mass below the
volume centroid).

.. Regarding the center of mass position, the DHV air worthiness guide p.9 says
   the harness riser attachment points must be "between 35 to 65cm above the
   seat board and must be separated from each other by 35cm to 55cm".

   The `para-test.com` (p.22 in `HOOK3_MANUAL_ENG.pdf` lists the "harness to
   risers distance" as 49cm for all wings, so that's another good source.


Model validation
================

.. How accurate is the model? This section involves **expected** outcomes,
   which means we already know what we expect to see. Validation is about
   *confirming*, not *learning*.

Validating the model is difficult for several reasons:

* Unlike the ``case study``, wind tunnel measurements are unavailable.

* It's not just the foil geometry and aerodynamic coefficients: now there's
  extra drag due to air intakes, suspension lines, the payload, and their
  connections.

* Then there's dynamic behavior which is significantly more complex. It
  requires good flight data but that's hard to get.

* more?

Conclusion: we've got to make do with point measurements of static behavior and
general expectations of dynamic behavior.


Polar curve
-----------

.. Plot and discuss the predicted polar curves.

   I don't have access to full polar curves, but I do have point estimates from
   certification and wing review flights.

   Use this section to really highlight the limitations/assumptions of the
   model? Unknown airfoil, unknown true line positions, lack of a proper
   `LineGeometry` (so brake deflections and arc changes when accelerator is
   applied are both unknown), no cell billowing, etc etc. Seems like a good
   place to point out "this is overestimating lift and underestimating drag, as
   expected."


.. Equilibrium states

* [[FIXME: define *equilibrium state*]]


.. Polar curves

* [[FIXME: define *polar curve*. Explain how they summarize the equilibrium
  states over a range of accelerator and symmetric brake inputs.]]

* [[Discuss the range of control inputs.

  For the brakes, the coefficient data limits the amount of trailing edge
  deflection the model can produce.

  For the accelerator, review the effect of :math:`\kappa_A` and
  :math:`\kappa_C`. I'm guessing those values, but wing's tend to be pretty
  sensitive to those.


Size 25
^^^^^^^

[[Size 25 test from `Hook 3 Parapente Mag 148.pdf`]]

.. figure:: figures/paraglider/demonstration/polar_25.svg

* My horizontal speed at trim is about 0.35 m/s slower than theirs.


Size 27
^^^^^^^

Test data for the size=27 model comes from a certification flight and
a magazine review in the Spanish magazine "Parapente".


The polar curve for the computer model:

.. figure:: figures/paraglider/demonstration/polar_27.svg




Steady-state turn
-----------------

* Apply 100% brake and observe steady-state radius, turn rate, and bank angle

  Compare to the sink rates during a hard turn in the DHV ratings guide; are
  they "within spec"? Does the DHV guide define "hard turn"? I'm restricting
  the amount of brake input; probably can't reach a "hard" turn.

  I could try to justify this by arguing that "hard turns aren't part of
  typical flight conditions", but really the issue is about accuracy for
  a given brake input.

* In `2013-01-23_hook3_23_en` they have the sink rate after two "steeply
  banked" turns is `>14m/s`. For my model, full brakes and weight shift only
  get it to `1.397m/s`. Wow, optimistic much? I wish I knew what bank angle
  they considered "steep". Granted, I'm using VERY optimistic airfoil data and
  am SEVERELY limiting the brake travel (they say the symmetric control travel
  is `>60cm`, whereas I'm limited to `kappa_b = 0.43m`, so this model only
  covers <72% of the travel they used in their tests)


Impulsive controls
------------------

* Control input impulses (on/off of symmetric brake, asymmetric brake,
  accelerator, weight shift). See the DHV certifications for guidelines.


Exiting accelerated flight
--------------------------

According to Sec:4.5.1 of the DHV ratings guide, it sounds like wings dive
**forward** when the accelerator is abruptly released. For my current
Hook3ish, rapidly letting off the accelerator produces a ~20deg positive pitch
(**backwards**), not forwards. Sure, after pitching backwards it then pitches
forwards to `-7°`, but still, odd. Related: `2013-01-23_hook3_23_en` says the
wing pitches forward less than `30°` upon exiting accelerated flight, which
I guess agrees with my model.

Is this because I'm neglecting changes to the canopy geometry? Or is it
symptomatic of the fact that I assume the lines stay taught? Conceptually,
when you quickly release the speedbar, the A lines will quickly extend; it
takes some time for the harness to drop (or the wing to rise) enough to regain
tension, so the wing is certainly going to behave in ways not modeled by my
equations. Good to point out.


Model investigation
===================

.. Validation was about CONFIRMATION; this section is about LEARNING. What can
   we learn by playing with the model?

   This section is the payoff for the paper! In the introduction to the paper
   I argued that dynamic simulations let you study the behavior of a system.
   Having concluded the model is usably accurate, this is where I show off what
   it can do.

[[Run interesting scenarios and consider the observed behavior. Useful to
discuss both the behavior of the (true) physical system and the model.]]


Apparent mass
-------------

Compare the real versus apparent mass matrices.

Under what conditions? It depends on the current velocity. Maybe compare the
real mass, apparent mass at hands-up equilibrium, apparent mass during a turn,
etc. The point is to **highlight the magnitude of the effect**.

Consider the relative magnitudes and the likely effects from accounting for
apparent inertia. Then show some scenarios where the effects are significant
(figure-8s) and highlight the magnitude of the effect.


Steep turn
----------

In `2013-01-23_hook3_23_en.pdf` they list the sink rate after two "steeply
banked" turns as `>14m/s` (31mph!). For my model, full brakes and weight shift
only get it to down to `1.42m/s`. Wow, optimistic much? Granted, I'm severely
limiting the brake travel and am using VERY optimistic airfoil data, but still.
**Do they define "steep"?**

Ah, they rate it as class B, which agrees with sections 4.1.8 and 4.1.9 of the
DHV standard :cite:`wild2009AirworthinessRequirementsHanggliders`, pg31. The
DHV say "steepest possible **spiral** dive achievable in two turns". They also
specify "no counter-turn".

Well, observe that I'm only able to achieve a 20° bank angle; that's NOTHING
compared to a "hard spiral dive" you'd see in an SIV. I wonder which component
model is the limiting factor?

Geeze, later in "Behavior exiting a steep spiral" they recorded a `19m/s` sink
rate for the 85kg! Clearly I am unable to model a spiral.


Off-center thermal interaction
------------------------------

**This was a major goal of my work.** It's one of the major reasons I insisted
on the aerodynamics supporting non-uniform wind fields.

* Bonus: how does geometric torsion affect the off-center thermal scenario?


Discussion
==========

* This chapter suggests a workflow:

  1. Fit the flattened chord surface (`c(s)`, `x(s)`, `r_x(s)`)

  2. Fit the arc (`yz(s), r_yz(s)`)

  3. Apply geometric twist (`theta(s)`)

  4. Specify section profiles (airfoils) and their coefficients

     [[Indexed profile sets; discuss coefficient tables?]]

  5. Specify material densities (upper, lower, ribs) for computing the inertia

  6. Specify a suspension line model (harness position, accelerator function,
     brake deflection distribution, line drag)

     (includes an initial guess for :math:`kappa_x`

  7. Specify a harness model

  8. Specify a system model (connection parameters, if applicable)

  9. Adjust `kappa_x` until maximum glide is at zero controls


* Everything related to the airfoils is sketchy. The choice of airfoil,
  modeling their deflected geometries, modeling the deflection distribution,
  etc. Tons of uncertainty here. Just stick a big red flag in it and say "hey,
  if you want to solve this problem, here's a big sticking point."

* Discuss how allowing the payload to pitch changes the result? The polars
  don't barely change so the effect is pretty negligible. A plot isn't worth it
  since the angles are so small, so maybe just list the angles.

* This chapter focuses on collecting the necessary information to produce the
  model. For the actual implementation, refer to ``glidersim``:

  * :external+glidersim:py:func:`pfh.glidersim.extras.wings.niviuk_hook3`

  * https://github.com/pfheatwole/glidersim/blob/main/scripts/build_hook3.py
